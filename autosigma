

local function IsWhitelisted(player)
    return table.find(Whitelisted, player.Name) ~= nil
end

-- Load Venyx UI
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/GreenDeno/Venyx-UI-Library/main/source.lua"))()
local venyx = library.new("/centrals @Jahware", 5013109572)

-- Theme
local themes = {
    Background = Color3.fromRGB(24, 24, 24),
    Glow = Color3.fromRGB(0, 0, 0),
    Accent = Color3.fromRGB(10, 10, 10),
    LightContrast = Color3.fromRGB(20, 20, 20),
    DarkContrast = Color3.fromRGB(14, 14, 14),
    TextColor = Color3.fromRGB(255, 255, 255)
}

-- Services
local Players = game:GetService("Players")
local Remote = game.ReplicatedStorage:WaitForChild("MainRemotes"):WaitForChild("MainRemoteEvent")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
local BP = LP:WaitForChild("Backpack")
local CHAR = LP.Character or LP.CharacterAdded:Wait()

-- State
local BUSY = false
local KillAllEnabled = false
local KillIndividualEnabled = false
local HoldKillAll = false
local HoldKillIndiv = false
local KillAllKey = Enum.KeyCode.Q
local KillIndivKey = Enum.KeyCode.E
local OneTapEnabled = false
local WHITELIST = {["imightberoyal"] = true}
local SUPPORTED_GUNS = {
    ["[Revolver]"] = true,
    ["[Double-Barrel SG]"] = true,
    ["[TacticalShotgun]"] = true
}

local HookedGuns = {}
local DrawCircle

-- Function to draw red circle
local function SetupCircle()
	if DrawCircle then return end
	DrawCircle = Drawing.new("Circle")
	DrawCircle.Radius = 60
	DrawCircle.Thickness = 1.5
	DrawCircle.Color = Color3.fromRGB(255, 0, 0)
	DrawCircle.Transparency = 0.8
	DrawCircle.Filled = false
end

-- Gun getter
local function GetGun()
	for name in pairs(SUPPORTED_GUNS) do
		local g = BP:FindFirstChild(name) or CHAR:FindFirstChild(name)
		if g then return g end
	end
	return nil
end

-- Kill single target (skip whitelisted)
local function KillTarget(targetPlayer)
	if IsWhitelisted(targetPlayer) then return end
	local Gun = GetGun()
	if not Gun or not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("Head") then return end
	Gun.Parent = CHAR
	for _ = 1, 10 do
		Remote:FireServer("ShootGun", Gun.Handle, Vector3.zero, Vector3.zero, targetPlayer.Character.Head, Vector3.new(-1, 0, 0))
	end
	Gun.Parent = BP
end

-- Kill All Players (skip whitelisted)
local function KillAll()
	if BUSY or not KillAllEnabled then return end
	BUSY = true
	local Gun = GetGun()
	if not Gun then BUSY = false return end
	Gun.Parent = CHAR
	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= LP and not IsWhitelisted(plr) and plr.Character and plr.Character:FindFirstChild("Head") then
			for _ = 1, 10 do
				Remote:FireServer("ShootGun", Gun.Handle, Vector3.zero, Vector3.zero, plr.Character.Head, Vector3.new(-1, 0, 0))
			end
		end
	end
	Gun.Parent = BP
	BUSY = false
end

-- Get closest to mouse (for one-tap), skip whitelisted
local function GetClosestToMouse()
	local closest, minDist = nil, 8000
	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= LP and not IsWhitelisted(plr) and plr.Character and plr.Character:FindFirstChild("Head") and not WHITELIST[plr.Name] then
			local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(plr.Character.Head.Position)
			if onScreen then
				local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
				if dist < minDist then
					minDist = dist
					closest = plr
				end
			end
		end
	end
	return closest
end

-- Extra hits for one-tap (skip whitelisted)
local function DoExtraHits(gun, target)
	if IsWhitelisted(target) then return end
	if not target or not target.Character or not target.Character:FindFirstChild("Head") then return end
	print("DoExtraHits called on", target.Name)
	BUSY = true
	task.wait()
	for _ = 1, 10 do
		Remote:FireServer("ShootGun", gun.Handle, Vector3.zero, Vector3.zero, target.Character.Head, Vector3.new(-1, 0, 0))
	end
	BUSY = false
end

-- Attach one-tap function to gun
local function HookGun(gun)
	if not gun:IsA("Tool") or HookedGuns[gun] then return end
	HookedGuns[gun] = true
	print("Hooked gun:", gun.Name)
	gun.Activated:Connect(function()
		print("Gun activated:", gun.Name, "OneTapEnabled =", OneTapEnabled, "BUSY =", BUSY)
		if BUSY or not OneTapEnabled then return end
		local target = GetClosestToMouse()
		if target then
			DoExtraHits(gun, target)
		else
			print("No valid target found for one tap")
		end
	end)
end

-- Function to hook all guns currently in backpack and character
local function HookAllGuns()
	HookedGuns = {} -- reset hooked guns to avoid duplicates
	for _, tool in pairs(BP:GetChildren()) do
		if SUPPORTED_GUNS[tool.Name] then
			HookGun(tool)
		end
	end
	for _, tool in pairs(CHAR:GetChildren()) do
		if SUPPORTED_GUNS[tool.Name] then
			HookGun(tool)
		end
	end
end

-- Hook guns on character spawn
LP.CharacterAdded:Connect(function(char)
	CHAR = char
	-- Wait a bit to make sure backpack and character tools are ready
	task.wait(1)
	HookAllGuns()
end)

-- Also hook when new tool added to backpack or character
CHAR.ChildAdded:Connect(function(tool)
	if SUPPORTED_GUNS[tool.Name] then
		HookGun(tool)
	end
end)
BP.ChildAdded:Connect(function(tool)
	if SUPPORTED_GUNS[tool.Name] then
		HookGun(tool)
	end
end)

-- Initial hook for existing guns
HookAllGuns()

-- Hold Key Loops
RunService.RenderStepped:Connect(function()
	SetupCircle()
	if DrawCircle then
		DrawCircle.Position = Vector2.new(Mouse.X, Mouse.Y)
	end

	if HoldKillAll and KillAllEnabled then
		KillAll()
	end

	if HoldKillIndiv and KillIndividualEnabled then
		local target = Mouse.Target
		if target and target.Parent then
			local model = target:FindFirstAncestorOfClass("Model")
			if model then
				local targetPlayer = Players:GetPlayerFromCharacter(model)
				if targetPlayer and targetPlayer ~= LP and not IsWhitelisted(targetPlayer) then
					KillTarget(targetPlayer)
				end
			end
		end
	end
end)

-- Key Input
UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == KillAllKey then
		HoldKillAll = true
	elseif input.KeyCode == KillIndivKey then
		HoldKillIndiv = true
	end
end)

UIS.InputEnded:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == KillAllKey then
		HoldKillAll = false
	elseif input.KeyCode == KillIndivKey then
		HoldKillIndiv = false
	end
end)

-- GUI Sections
local page = venyx:addPage("Main", 5012544693)

-- Kill All Section
local killAllSection = page:addSection("Kill All")
killAllSection:addToggle("(Hold) to kill all", false, function(value)
	KillAllEnabled = value
end)
killAllSection:addKeybind("Keybind", KillAllKey, function() end, function(newInput)
	if newInput and newInput.KeyCode then
		KillAllKey = newInput.KeyCode
	end
end)

-- Hover Kill Section
local hoverSection = page:addSection("Solo Kill")
hoverSection:addToggle("(Hold) onto a player", false, function(value)
	KillIndividualEnabled = value
end)
hoverSection:addKeybind("Keybind", KillIndivKey, function() end, function(newInput)
	if newInput and newInput.KeyCode then
		KillIndivKey = newInput.KeyCode
	end
end)

-- One Tap Guns Section
local oneTapSection = page:addSection("OneTap Guns")
oneTapSection:addToggle("Gun spoof", false, function(val)
	OneTapEnabled = val
	print("One Tap Enabled set to:", val)
end)
oneTapSection:addParagraph("Supported Guns", table.concat((function()
	local t = {}
	for g in pairs(SUPPORTED_GUNS) do table.insert(t, g) end
	return t
end)(), ", "))

venyx:SelectPage(venyx.pages[1], true)

local RemoteWhitelist = {}
local function FetchRemoteWhitelist()
    local success, result = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/awdawdawdawawdawdawd/usernamewhitelist/refs/heads/main/whitelist")
    end)
    if success and result then
        for _, name in ipairs(string.split(result, "\n")) do
            name = name:match("^%s*(.-)%s*$") 
            if name ~= "" then
                table.insert(RemoteWhitelist, name)
            end
        end
    end
end

FetchRemoteWhitelist()

local function IsWhitelisted(player)
    return table.find(Whitelisted, player.Name) ~= nil or table.find(RemoteWhitelist, player.Name) ~= nil
end

